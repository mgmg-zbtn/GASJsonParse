{"files":[{"id":"556a1e9e-b5ce-4f3e-a4f8-516ba964ccc9","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Tokyo\",\n  \"dependencies\": {\n    \"libraries\": [\n      {\n        \"userSymbol\": \"dayjs\",\n        \"libraryId\": \"1ShsRhHc8tgPy5wGOzUvgEhOedJUQD53m-gd8lG2MOgs-dXC_aCZn9lFB\",\n        \"version\": \"1\"\n      }\n    ]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"MYSELF\"\n  }\n}"},{"id":"e4bcfc58-5993-4f04-a74b-52b6b89649cf","name":"totalization","type":"server_js","source":"/**\n * 指定した範囲の月毎シートをすべて集計する\n * \n * 重複集計     : totalization\n * 同じ状態の販売記録も重複させる\n *\n * 重複なし集計 : reduction\n * [タイトル・巻数・金額・備考]\n * 完全一致するデータを1つにする\n * \n * ヤフオク集計 : yahoo\n * 備考に「ヤフオク」と含まれているデータだけ残す\n * \n */\nfunction totalization() {\n\n  const spreadSheet \u003d SpreadsheetApp.openById(\u00271QG5HyjtWJz95tBoBkhEp_CoFyyh_bretOpxXC69N77o\u0027);\n  const totalizationSheet \u003d spreadSheet.getSheetByName(\u0027集計\u0027);\n  let startMonth \u003d totalizationSheet.getRange(\"B1\").getValue();\n  let endMonth \u003d totalizationSheet.getRange(\"B2\").getValue();\n\n  if (!isSheetExists(spreadSheet, startMonth) || !isSheetExists(spreadSheet, endMonth)) {\n    // ※範囲内のシートは調べていない\n    console.log(\u0027指定したシートがありません\u0027);\n    return;\n  }\n\n  // 集計処理（更新）した日付を記録しておく\n  dayjs.dayjs().locale(\u0027ja\u0027);\n  const today \u003d dayjs.dayjs(new Date());\n  totalizationSheet.getRange(\"H2\").setValue(today.format(\u0027YYYY-MM-DD\u0027));\n\n  startMonth \u003d dayjs.dayjs(startMonth);\n  endMonth \u003d dayjs.dayjs(endMonth);\n\n  // 集計期間を求める\n  const diffMonth \u003d endMonth.diff(startMonth, \u0027month\u0027);\n  // 集計期間のデータをすべて格納する\n  let data \u003d [];\n  // console.log(endMonth.format(\u0027YYYY-M\u0027) + \u0027 - \u0027 + startMonth.format(\u0027YYYY-M\u0027) + \u0027 \u003d \u0027+ diffMonth);\n\n  if (0 \u003c\u003d diffMonth) {\n    for (let i \u003d 0; i \u003c\u003d diffMonth ; i++) {\n      const m \u003d startMonth.add(i, \u0027month\u0027);\n      const targetSheet \u003d spreadSheet.getSheetByName(m.format(\u0027YYYY-M\u0027));\n      const lastRow \u003d targetSheet.getLastRow();\n      const temp \u003d targetSheet.getRange(2, 1, lastRow - 1, 5).getValues();\n      data \u003d data.concat(temp);\n    }\n  } else {\n    console.log(diffMonth + \u0027：不適切な集計期間です\u0027);\n    return;\n  }\n\n  // 集計シートをリセットする\n  let tLastRow \u003d totalizationSheet.getLastRow();\n  totalizationSheet.getRange(5, 1, tLastRow, 17).clearContent();\n\n  var bo113 \u003d [];   // 少女\n  var bo112 \u003d [];   // 少年\n  var bo111 \u003d [];   // 大人（レギュラー）\n  var bo111a \u003d[];   // 文庫コミック\n  var bo111b \u003d[];   // ワイドコミック\n  var bo111c \u003d[];   // コンビニコミック\n  var bo105 \u003d [];   // 児童書\n  var bo102 \u003d [];   // 雑誌\n  var bo141 \u003d [];   // 単行\n  var bo000 \u003d [];   // 111.112.113以外をまとめたもの\n\n  // 纏めたデータを振り分ける\n  for (let i \u003d 0; i \u003c data.length; i++) {\n    switch (data[i][0]) {\n      case \u0027少女コミック\u0027: bo113[bo113.length] \u003d data[i]; break;\n      case \u0027少年コミック\u0027: bo112[bo112.length] \u003d data[i]; break;\n      case \u0027大人コミック\u0027: bo111[bo111.length] \u003d data[i]; break;\n      case \u0027文庫コミック\u0027: bo111a[bo111a.length] \u003d data[i]; break;\n      case \u0027ワイドコミック\u0027: bo111b[bo111b.length] \u003d data[i]; break;\n      case \u0027コンビニコミック\u0027: bo111c[bo111c.length] \u003d data[i]; break;\n      case \u0027児童書\u0027: bo105[bo105.length] \u003d data[i]; break;\n      case \u0027雑誌\u0027: bo102[bo102.length] \u003d data[i]; break;\n      case \u0027単行\u0027: bo141[bo141.length] \u003d data[i]; break;\n    }\n  }\n\n  /**\n   * 月毎シートの部門列は集計シートで1列毎に纏められる為\n   * 1列削った形に変換する\n   * @see util.gs\n   */\n  bo113 \u003d convert(bo113);\n  bo112 \u003d convert(bo112);\n  bo111 \u003d convert(bo111);\n\n  // 副商材は1列の中に纏める\n  // こちらは部門ごとに列が分かれないので\n  // そのままのデータを使う（変換しない）\n  bo000 \u003d bo000.concat(bo111a);\n  bo000 \u003d bo000.concat(bo111b);\n  bo000 \u003d bo000.concat(bo111c);\n  bo000 \u003d bo000.concat(bo105);\n  bo000 \u003d bo000.concat(bo102);\n  bo000 \u003d bo000.concat(bo141);\n\n  // GASのソートを使うので一度ソート前のデータをシートに展開する\n  totalizationSheet.getRange(5, 1, bo113.length, 4).setValues(bo113);\n  totalizationSheet.getRange(5, 5, bo112.length, 4).setValues(bo112);\n  totalizationSheet.getRange(5, 9, bo111.length, 4).setValues(bo111);\n  totalizationSheet.getRange(5, 13, bo000.length, 5).setValues(bo000);\n\n  // ascending : true 小さい順(昇順)\n  tLastRow \u003d totalizationSheet.getLastRow();\n  totalizationSheet.getRange(5, 1, tLastRow, 4).sort([\n    {column: 1, ascending: true},\n    {column: 2, ascending: true},\n    {column: 3, ascending: true},\n    {column: 4, ascending: true},\n  ]);\n  totalizationSheet.getRange(5, 5, tLastRow, 4).sort([\n    {column: 5, ascending: true},\n    {column: 6, ascending: true},\n    {column: 7, ascending: true},\n    {column: 8, ascending: true},\n  ]);\n  totalizationSheet.getRange(5, 9, tLastRow, 4).sort([\n    {column: 9, ascending: true},\n    {column: 10, ascending: true},\n    {column: 11, ascending: true},\n    {column: 12, ascending: true},\n  ]);\n  totalizationSheet.getRange(5, 13, tLastRow, 5).sort([\n    {column: 13, ascending: true},\n    {column: 14, ascending: true},\n    {column: 15, ascending: true},\n    {column: 16, ascending: true},\n    {column: 17, ascending: true},\n  ]);\n}\n"},{"id":"f4b89666-c209-46c3-8f87-2a3cff9f9f17","name":"util","type":"server_js","source":"function convert(data) {\n  let l \u003d Object.keys(data).length;\n  let temp \u003d new Array(l);\n  for (let i \u003d 0; i \u003c l; i++) {\n    temp[i] \u003d new Array(4);\n    temp[i][0] \u003d data[i][1];\n    temp[i][1] \u003d data[i][2];\n    temp[i][2] \u003d data[i][3];\n    temp[i][3] \u003d data[i][4];\n  }\n  return temp;\n}\n\n\nfunction isSheetExists(spreadSheet, targetSheet) {\n  let temp \u003d spreadSheet.getSheets();\n  for (let i \u003d 0; i \u003c temp.length; i++) {\n    if (targetSheet \u003d\u003d\u003d temp[i].getName()) return true;\n  }\n  return false;\n}\n"},{"id":"a64062c5-c21e-4e49-806c-f366b313deae","name":"sandbox","type":"server_js","source":"/**\n * テスト用の場所\n */\nfunction sandbox() {\n  const spreadSheet \u003d SpreadsheetApp.openById(\u00271QG5HyjtWJz95tBoBkhEp_CoFyyh_bretOpxXC69N77o\u0027);\n  let startMonth \u003d \u00272021-8\u0027;\n  startMonth \u003d dayjs.dayjs(startMonth);\n  let data \u003d [];\n\n  for (let i \u003d 0; i \u003c\u003d 24 ; i++) {\n    const m \u003d startMonth.add(i, \u0027month\u0027);\n    const targetSheet \u003d spreadSheet.getSheetByName(m.format(\u0027YYYY-M\u0027));\n    const temp \u003d targetSheet.getRange(13, 8).getValue();\n    data \u003d data.concat(temp);\n    // console.log(i + \u0027 : \u0027 + temp);\n  }\n\n  let total \u003d data.reduce((accumulator, currentValue) \u003d\u003e accumulator + currentValue, 0);\n  // console.log(\u0027sum:\u0027 + total);\n  console.log(total / 24);\n}\n\n// function sandbox() {\n//   let text \u003d \u0027ヤフオク\u0027;\n//   let pattern \u003d /ヤフオク/g;\n//   console.log(text.match(pattern));\n// }\n\n// function sandbox() {\n//   let arr \u003d [[1,2], [2,4], [2,3], [3,4], [3,6], [3,8], [9,10], [2,0]];\n//   for (let i \u003d 0; i \u003c arr.length; i++) {\n//     const temp \u003d arr[i];\n//     if (2 \u003d\u003d\u003d arr[i][0]) {\n//       arr.splice(i, 1);\n//       i -\u003d 1;\n//     }\n//   }\n//   for (let i \u003d 0; i \u003c arr.length; i++) {\n//     console.log(i + \":\" + arr[i]);\n//   }\n// }\n\n\n// reduction cut pattern\n// function sandbox() {\n//   // let arr \u003d [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n//   let arr \u003d [[1,2], [3,4], [3,6], [3,8], [9,10]];\n//   for (let i \u003d 0; i \u003c arr.length - 1; i++) {\n//     const temp \u003d arr[i];\n//     if (temp[0] \u003d\u003d\u003d arr[i + 1][0]) {\n//       arr.splice(i, 1);\n//       i -\u003d 1;\n//     }\n//   }\n//   for (let i \u003d 0; i \u003c arr.length; i++) {\n//     console.log(i + \":\" + arr[i]);\n//   }\n// }\n"},{"id":"72938be2-1eb0-481b-973b-1d854184baf7","name":"reduction","type":"server_js","source":"/**\n * totalizationが先に実行される\n * タイトル・巻数・金額・備考\n * 重複する（上記が全て完全一致した）データを削除する（1つだけ残る）\n * \n * reductA : bo113,bo112, bo111\n *       [タイトル, 巻数, 金額, 備考]\n * reductB : bo000\n * [部門, タイトル, 巻数, 金額, 備考]\n * \n * 集計シートからそれぞれデータを調べるので\n * 主要な部門と纏められた部門で備考の位置が違う\n * また抽出した後のデータも集計シートに設置しなおすので\n * 形式（要素数）は変更できない\n * 見た目の分かり易さ優先で2種類に関数を分けました\n */\nfunction reduction() {\n\n  totalization();\n\n  const spreadSheet \u003d SpreadsheetApp.openById(\u00271QG5HyjtWJz95tBoBkhEp_CoFyyh_bretOpxXC69N77o\u0027);\n  const totalizationSheet \u003d spreadSheet.getSheetByName(\u0027集計\u0027);\n  let lastRow \u003d totalizationSheet.getLastRow();\n\n  /****************************************************************************/\n\n  let bo113 \u003d totalizationSheet.getRange(5, 1, lastRow, 4).getValues();\n  bo113 \u003d reductA(bo113);\n  totalizationSheet.getRange(5, 1, lastRow, 4).clear();\n  totalizationSheet.getRange(5, 1, bo113.length, 4).setValues(bo113);\n  \n  /****************************************************************************/\n\n  let bo112 \u003d totalizationSheet.getRange(5, 5, lastRow, 4).getValues();\n  bo113 \u003d reductA(bo112);\n  totalizationSheet.getRange(5, 5, lastRow, 4).clear();\n  totalizationSheet.getRange(5, 5, bo112.length, 4).setValues(bo112);\n\n  /****************************************************************************/\n\n  let bo111 \u003d totalizationSheet.getRange(5, 9, lastRow, 4).getValues();\n  bo111 \u003d reductA(bo111);\n  totalizationSheet.getRange(5, 9, lastRow - 1, 4).clear();\n  totalizationSheet.getRange(5, 9, bo111.length, 4).setValues(bo111);\n\n  /****************************************************************************/\n\n  let bo000 \u003d totalizationSheet.getRange(5, 13, lastRow, 5).getValues();\n  bo000 \u003d reductB(bo000);\n  totalizationSheet.getRange(5, 13, lastRow, 5).clear();\n  totalizationSheet.getRange(5, 13, bo000.length, 5).setValues(bo000);\n\n}\n\n// totalizationでソートが完了しているので1つ先と比較する\nfunction reductA(data) {\n  for (let i \u003d 0; i \u003c data.length - 1; i++) {\n    const temp \u003d data[i];\n    if (temp[0] \u003d\u003d\u003d data[i + 1][0] \u0026\u0026\n        temp[1] \u003d\u003d\u003d data[i + 1][1] \u0026\u0026\n        temp[2] \u003d\u003d\u003d data[i + 1][2] \u0026\u0026\n        temp[3] \u003d\u003d\u003d data[i + 1][3]) {\n      data.splice(i, 1);\n      i -\u003d 1;\n    }\n  }\n  return data;\n}\n\nfunction reductB(data) {\n  for (let i \u003d 0; i \u003c data.length - 1; i++) {\n    const temp \u003d data[i];\n    if (temp[0] \u003d\u003d\u003d data[i + 1][0] \u0026\u0026\n        temp[1] \u003d\u003d\u003d data[i + 1][1] \u0026\u0026\n        temp[2] \u003d\u003d\u003d data[i + 1][2] \u0026\u0026\n        temp[3] \u003d\u003d\u003d data[i + 1][3] \u0026\u0026\n        temp[4] \u003d\u003d\u003d data[i + 1][4]) {\n      data.splice(i, 1);\n      i -\u003d 1;\n    }\n  }\n  return data;\n}"},{"id":"eb61e7c8-de9e-4643-a295-47186827d10c","name":"yahoo","type":"server_js","source":"/**\n * （totalizationと）reduction が先に実行される\n * 備考に「ヤフオク」と含まれているデータだけ残す\n *\n * picupA : bo113,bo112, bo111\n *       [タイトル, 巻数, 金額, 備考]\n * picupB : bo000\n * [部門, タイトル, 巻数, 金額, 備考]\n\n * 集計シートからそれぞれデータを調べるので\n * 主要な部門と纏められた部門で備考の位置が違う\n * また抽出した後のデータも集計シートに設置しなおすので\n * 形式（要素数）は変更できない\n * 見た目の分かり易さ優先で2種類に関数を分けました\n */\nfunction yahoo() {\n\n  reduction();\n\n  const spreadSheet \u003d SpreadsheetApp.openById(\u00271QG5HyjtWJz95tBoBkhEp_CoFyyh_bretOpxXC69N77o\u0027);\n  const totalizationSheet \u003d spreadSheet.getSheetByName(\u0027集計\u0027);\n  let lastRow \u003d totalizationSheet.getLastRow();\n\n  /****************************************************************************/\n\n  let bo113 \u003d totalizationSheet.getRange(5, 1, lastRow, 4).getValues();\n  bo113 \u003d picupA(bo113);\n  totalizationSheet.getRange(5, 1, lastRow, 4).clear();\n  // 集計範囲によってはヤフオクが含まれない場合もある\n  // 以下同様の処理\n  if (0 \u003c bo113.length) {\n    totalizationSheet.getRange(5, 1, bo113.length, 4).setValues(bo113);\n  }\n\n  /****************************************************************************/\n\n  let bo112 \u003d totalizationSheet.getRange(5, 5, lastRow, 4).getValues();\n  bo112 \u003d picupA(bo112);\n  totalizationSheet.getRange(5, 5, lastRow, 4).clear();\n  if (0 \u003c bo112.length) {\n    totalizationSheet.getRange(5, 5, bo112.length, 4).setValues(bo112);\n  }\n\n  /****************************************************************************/\n\n  let bo111 \u003d totalizationSheet.getRange(5, 9, lastRow, 4).getValues();\n  bo111 \u003d picupA(bo111);\n  totalizationSheet.getRange(5, 9, lastRow, 4).clear();\n  if (0 \u003c bo111.length) {\n    totalizationSheet.getRange(5, 9, bo111.length, 4).setValues(bo111);\n  }\n\n  /****************************************************************************/\n\n  let bo000 \u003d totalizationSheet.getRange(5, 13, lastRow, 5).getValues();\n  bo000 \u003d picupB(bo000);\n  totalizationSheet.getRange(5, 13, lastRow, 5).clear();\n  if (0 \u003c bo000.length) {\n    totalizationSheet.getRange(5, 13, bo000.length, 5).setValues(bo000);\n  }\n}\n\n\nfunction picupA(data) {\n  for (let i \u003d 0; i \u003c data.length; i++) {\n    if (data[i][3].match(/ヤフオク/g) \u003d\u003d\u003d null) {\n      data.splice(i, 1);\n      i -\u003d 1;\n    }\n  }\n  return data;\n}\n\nfunction picupB(data) {\n  for (let i \u003d 0; i \u003c data.length; i++) {\n    if (data[i][4].match(/ヤフオク/g) \u003d\u003d\u003d null) {\n      data.splice(i, 1);\n      i -\u003d 1;\n    }\n  }\n  return data;\n}"},{"id":"cd202e3e-1642-4943-a3f3-91b5c85a1203","name":"onOpen","type":"server_js","source":"// ブラウザ側を元ページ\n// デスクトップをシート指定のリンクにする\n// 毎月リンク張替えする\n\nfunction onOpen() {\n  // const d \u003d dayjs.dayjs();\n  // const spreadsheet \u003d SpreadsheetApp.getActiveSpreadsheet();\n  // spreadsheet.getSheetByName(d.year() + \u0027-\u0027 + (d.month() + 1)).activate();\n}\n"}]}